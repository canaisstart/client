"""Direct the client to resolve this field locally, either from the cache or local resolvers."""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!
  """An array of query argument names to include in the generated custom store key."""
  filter: [String!]
) on FIELD

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Banner {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  image: UploadFile
  title: String!
  subtitle: String!
  button: ComponentPageButton
  ribbon: ComponentPageRibbon
  published_at: DateTime
}

type BannerConnection {
  values: [Banner]
  groupBy: BannerGroupBy
  aggregate: BannerAggregator
}

type BannerAggregator {
  count: Int
  totalCount: Int
}

type BannerGroupBy {
  id: [BannerConnectionId]
  created_at: [BannerConnectionCreated_at]
  updated_at: [BannerConnectionUpdated_at]
  image: [BannerConnectionImage]
  title: [BannerConnectionTitle]
  subtitle: [BannerConnectionSubtitle]
  button: [BannerConnectionButton]
  ribbon: [BannerConnectionRibbon]
  published_at: [BannerConnectionPublished_at]
}

type BannerConnectionId {
  key: ID
  connection: BannerConnection
}

type BannerConnectionCreated_at {
  key: DateTime
  connection: BannerConnection
}

type BannerConnectionUpdated_at {
  key: DateTime
  connection: BannerConnection
}

type BannerConnectionImage {
  key: ID
  connection: BannerConnection
}

type BannerConnectionTitle {
  key: String
  connection: BannerConnection
}

type BannerConnectionSubtitle {
  key: String
  connection: BannerConnection
}

type BannerConnectionButton {
  key: ID
  connection: BannerConnection
}

type BannerConnectionRibbon {
  key: ID
  connection: BannerConnection
}

type BannerConnectionPublished_at {
  key: DateTime
  connection: BannerConnection
}

input BannerInput {
  image: ID
  title: String!
  subtitle: String!
  button: ComponentPageButtonInput!
  ribbon: ComponentPageRibbonInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBannerInput {
  image: ID
  title: String
  subtitle: String
  button: editComponentPageButtonInput
  ribbon: editComponentPageRibbonInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createBannerInput {
  data: BannerInput
}

type createBannerPayload {
  banner: Banner
}

input updateBannerInput {
  where: InputID
  data: editBannerInput
}

type updateBannerPayload {
  banner: Banner
}

input deleteBannerInput {
  where: InputID
}

type deleteBannerPayload {
  banner: Banner
}

type Category {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  slug: String!
  courses(sort: String, limit: Int, start: Int, where: JSON): [Course!]!
}

type CategoryConnection {
  values: [Category]
  groupBy: CategoryGroupBy
  aggregate: CategoryAggregator
}

type CategoryAggregator {
  count: Int
  totalCount: Int
}

type CategoryGroupBy {
  id: [CategoryConnectionId]
  created_at: [CategoryConnectionCreated_at]
  updated_at: [CategoryConnectionUpdated_at]
  name: [CategoryConnectionName]
  slug: [CategoryConnectionSlug]
}

type CategoryConnectionId {
  key: ID
  connection: CategoryConnection
}

type CategoryConnectionCreated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionUpdated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionName {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionSlug {
  key: String
  connection: CategoryConnection
}

input CategoryInput {
  name: String!
  slug: String!
  courses: [ID]
  created_by: ID
  updated_by: ID
}

input editCategoryInput {
  name: String
  slug: String
  courses: [ID]
  created_by: ID
  updated_by: ID
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

type CourseType {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  slug: String
  courses(sort: String, limit: Int, start: Int, where: JSON): [Course!]!
}

type CourseTypeConnection {
  values: [CourseType]
  groupBy: CourseTypeGroupBy
  aggregate: CourseTypeAggregator
}

type CourseTypeAggregator {
  count: Int
  totalCount: Int
}

type CourseTypeGroupBy {
  id: [CourseTypeConnectionId]
  created_at: [CourseTypeConnectionCreated_at]
  updated_at: [CourseTypeConnectionUpdated_at]
  name: [CourseTypeConnectionName]
  slug: [CourseTypeConnectionSlug]
}

type CourseTypeConnectionId {
  key: ID
  connection: CourseTypeConnection
}

type CourseTypeConnectionCreated_at {
  key: DateTime
  connection: CourseTypeConnection
}

type CourseTypeConnectionUpdated_at {
  key: DateTime
  connection: CourseTypeConnection
}

type CourseTypeConnectionName {
  key: String
  connection: CourseTypeConnection
}

type CourseTypeConnectionSlug {
  key: String
  connection: CourseTypeConnection
}

input CourseTypeInput {
  name: String!
  slug: String
  courses: [ID]
  created_by: ID
  updated_by: ID
}

input editCourseTypeInput {
  name: String
  slug: String
  courses: [ID]
  created_by: ID
  updated_by: ID
}

input createCourseTypeInput {
  data: CourseTypeInput
}

type createCourseTypePayload {
  courseType: CourseType
}

input updateCourseTypeInput {
  where: InputID
  data: editCourseTypeInput
}

type updateCourseTypePayload {
  courseType: CourseType
}

input deleteCourseTypeInput {
  where: InputID
}

type deleteCourseTypePayload {
  courseType: CourseType
}

type Course {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  slug: String
  short_description: String!
  price: Float!
  description: String!
  duration: String!
  lesson: Int!
  cover: UploadFile
  date_course: Date
  category: Category
  instructor: Instructor
  course_type: CourseType
  curriculum: [ComponentCourseCurriculum]
  available: Boolean!
  published_at: DateTime
}

type CourseConnection {
  values: [Course]
  groupBy: CourseGroupBy
  aggregate: CourseAggregator
}

type CourseAggregator {
  count: Int
  totalCount: Int
  sum: CourseAggregatorSum
  avg: CourseAggregatorAvg
  min: CourseAggregatorMin
  max: CourseAggregatorMax
}

type CourseAggregatorSum {
  price: Float
  lesson: Float
}

type CourseAggregatorAvg {
  price: Float
  lesson: Float
}

type CourseAggregatorMin {
  price: Float
  lesson: Float
}

type CourseAggregatorMax {
  price: Float
  lesson: Float
}

type CourseGroupBy {
  id: [CourseConnectionId]
  created_at: [CourseConnectionCreated_at]
  updated_at: [CourseConnectionUpdated_at]
  name: [CourseConnectionName]
  slug: [CourseConnectionSlug]
  short_description: [CourseConnectionShort_description]
  price: [CourseConnectionPrice]
  description: [CourseConnectionDescription]
  duration: [CourseConnectionDuration]
  lesson: [CourseConnectionLesson]
  cover: [CourseConnectionCover]
  date_course: [CourseConnectionDate_course]
  category: [CourseConnectionCategory]
  instructor: [CourseConnectionInstructor]
  course_type: [CourseConnectionCourse_type]
  available: [CourseConnectionAvailable]
  published_at: [CourseConnectionPublished_at]
}

type CourseConnectionId {
  key: ID
  connection: CourseConnection
}

type CourseConnectionCreated_at {
  key: DateTime
  connection: CourseConnection
}

type CourseConnectionUpdated_at {
  key: DateTime
  connection: CourseConnection
}

type CourseConnectionName {
  key: String
  connection: CourseConnection
}

type CourseConnectionSlug {
  key: String
  connection: CourseConnection
}

type CourseConnectionShort_description {
  key: String
  connection: CourseConnection
}

type CourseConnectionPrice {
  key: Float
  connection: CourseConnection
}

type CourseConnectionDescription {
  key: String
  connection: CourseConnection
}

type CourseConnectionDuration {
  key: String
  connection: CourseConnection
}

type CourseConnectionLesson {
  key: Int
  connection: CourseConnection
}

type CourseConnectionCover {
  key: ID
  connection: CourseConnection
}

type CourseConnectionDate_course {
  key: ID
  connection: CourseConnection
}

type CourseConnectionCategory {
  key: ID
  connection: CourseConnection
}

type CourseConnectionInstructor {
  key: ID
  connection: CourseConnection
}

type CourseConnectionCourse_type {
  key: ID
  connection: CourseConnection
}

type CourseConnectionAvailable {
  key: Boolean
  connection: CourseConnection
}

type CourseConnectionPublished_at {
  key: DateTime
  connection: CourseConnection
}

input CourseInput {
  name: String!
  slug: String
  short_description: String!
  price: Float
  description: String!
  duration: String!
  lesson: Int!
  cover: ID
  date_course: Date
  category: ID
  instructor: ID
  course_type: ID
  curriculum: [ComponentCourseCurriculumInput!]
  available: Boolean
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCourseInput {
  name: String
  slug: String
  short_description: String
  price: Float
  description: String
  duration: String
  lesson: Int
  cover: ID
  date_course: Date
  category: ID
  instructor: ID
  course_type: ID
  curriculum: [editComponentCourseCurriculumInput]
  available: Boolean
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCourseInput {
  data: CourseInput
}

type createCoursePayload {
  course: Course
}

input updateCourseInput {
  where: InputID
  data: editCourseInput
}

type updateCoursePayload {
  course: Course
}

input deleteCourseInput {
  where: InputID
}

type deleteCoursePayload {
  course: Course
}

type Home {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  freeCourses: ComponentPageSection
  popularCourses: ComponentPagePopularGames
  published_at: DateTime
}

input HomeInput {
  freeCourses: ComponentPageSectionInput
  popularCourses: ComponentPagePopularGameInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editHomeInput {
  freeCourses: editComponentPageSectionInput
  popularCourses: editComponentPagePopularGameInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateHomeInput {
  data: editHomeInput
}

type updateHomePayload {
  home: Home
}

type deleteHomePayload {
  home: Home
}

type Instructor {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  slug: String
  email: String!
  phone: String
  courses(sort: String, limit: Int, start: Int, where: JSON): [Course!]!
}

type InstructorConnection {
  values: [Instructor]
  groupBy: InstructorGroupBy
  aggregate: InstructorAggregator
}

type InstructorAggregator {
  count: Int
  totalCount: Int
}

type InstructorGroupBy {
  id: [InstructorConnectionId]
  created_at: [InstructorConnectionCreated_at]
  updated_at: [InstructorConnectionUpdated_at]
  name: [InstructorConnectionName]
  slug: [InstructorConnectionSlug]
  email: [InstructorConnectionEmail]
  phone: [InstructorConnectionPhone]
}

type InstructorConnectionId {
  key: ID
  connection: InstructorConnection
}

type InstructorConnectionCreated_at {
  key: DateTime
  connection: InstructorConnection
}

type InstructorConnectionUpdated_at {
  key: DateTime
  connection: InstructorConnection
}

type InstructorConnectionName {
  key: String
  connection: InstructorConnection
}

type InstructorConnectionSlug {
  key: String
  connection: InstructorConnection
}

type InstructorConnectionEmail {
  key: String
  connection: InstructorConnection
}

type InstructorConnectionPhone {
  key: String
  connection: InstructorConnection
}

input InstructorInput {
  name: String!
  slug: String
  email: String!
  courses: [ID]
  phone: String
  created_by: ID
  updated_by: ID
}

input editInstructorInput {
  name: String
  slug: String
  email: String
  courses: [ID]
  phone: String
  created_by: ID
  updated_by: ID
}

input createInstructorInput {
  data: InstructorInput
}

type createInstructorPayload {
  instructor: Instructor
}

input updateInstructorInput {
  where: InputID
  data: editInstructorInput
}

type updateInstructorPayload {
  instructor: Instructor
}

input deleteInstructorInput {
  where: InputID
}

type deleteInstructorPayload {
  instructor: Instructor
}

type Order {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  user: UsersPermissionsUser
  payment_intent_id: String
  card_brand: String
  card_last4: String
  total_in_cents: Long
  courses(sort: String, limit: Int, start: Int, where: JSON): [Course!]!
}

type OrderConnection {
  values: [Order]
  groupBy: OrderGroupBy
  aggregate: OrderAggregator
}

type OrderAggregator {
  count: Int
  totalCount: Int
}

type OrderGroupBy {
  id: [OrderConnectionId]
  created_at: [OrderConnectionCreated_at]
  updated_at: [OrderConnectionUpdated_at]
  user: [OrderConnectionUser]
  payment_intent_id: [OrderConnectionPayment_intent_id]
  card_brand: [OrderConnectionCard_brand]
  card_last4: [OrderConnectionCard_last4]
  total_in_cents: [OrderConnectionTotal_in_cents]
}

type OrderConnectionId {
  key: ID
  connection: OrderConnection
}

type OrderConnectionCreated_at {
  key: DateTime
  connection: OrderConnection
}

type OrderConnectionUpdated_at {
  key: DateTime
  connection: OrderConnection
}

type OrderConnectionUser {
  key: ID
  connection: OrderConnection
}

type OrderConnectionPayment_intent_id {
  key: String
  connection: OrderConnection
}

type OrderConnectionCard_brand {
  key: String
  connection: OrderConnection
}

type OrderConnectionCard_last4 {
  key: String
  connection: OrderConnection
}

type OrderConnectionTotal_in_cents {
  key: ID
  connection: OrderConnection
}

input OrderInput {
  user: ID
  payment_intent_id: String
  card_brand: String
  card_last4: String
  total_in_cents: Long
  courses: [ID]
  created_by: ID
  updated_by: ID
}

input editOrderInput {
  user: ID
  payment_intent_id: String
  card_brand: String
  card_last4: String
  total_in_cents: Long
  courses: [ID]
  created_by: ID
  updated_by: ID
}

input createOrderInput {
  data: OrderInput
}

type createOrderPayload {
  order: Order
}

input updateOrderInput {
  where: InputID
  data: editOrderInput
}

type updateOrderPayload {
  order: Order
}

input deleteOrderInput {
  where: InputID
}

type deleteOrderPayload {
  order: Order
}

type Recommended {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  section: ComponentPagePopularGames
}

input RecommendedInput {
  section: ComponentPagePopularGameInput!
  created_by: ID
  updated_by: ID
}

input editRecommendedInput {
  section: editComponentPagePopularGameInput
  created_by: ID
  updated_by: ID
}

input updateRecommendedInput {
  data: editRecommendedInput
}

type updateRecommendedPayload {
  recommended: Recommended
}

type deleteRecommendedPayload {
  recommended: Recommended
}

type UsersLessons {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  userId: UsersPermissionsUser
  lesson_id: Int!
  published_at: DateTime
}

type UsersLessonsConnection {
  values: [UsersLessons]
  groupBy: UsersLessonsGroupBy
  aggregate: UsersLessonsAggregator
}

type UsersLessonsAggregator {
  count: Int
  totalCount: Int
  sum: UsersLessonsAggregatorSum
  avg: UsersLessonsAggregatorAvg
  min: UsersLessonsAggregatorMin
  max: UsersLessonsAggregatorMax
}

type UsersLessonsAggregatorSum {
  lesson_id: Float
}

type UsersLessonsAggregatorAvg {
  lesson_id: Float
}

type UsersLessonsAggregatorMin {
  lesson_id: Float
}

type UsersLessonsAggregatorMax {
  lesson_id: Float
}

type UsersLessonsGroupBy {
  id: [UsersLessonsConnectionId]
  created_at: [UsersLessonsConnectionCreated_at]
  updated_at: [UsersLessonsConnectionUpdated_at]
  userId: [UsersLessonsConnectionUserId]
  lesson_id: [UsersLessonsConnectionLesson_id]
  published_at: [UsersLessonsConnectionPublished_at]
}

type UsersLessonsConnectionId {
  key: ID
  connection: UsersLessonsConnection
}

type UsersLessonsConnectionCreated_at {
  key: DateTime
  connection: UsersLessonsConnection
}

type UsersLessonsConnectionUpdated_at {
  key: DateTime
  connection: UsersLessonsConnection
}

type UsersLessonsConnectionUserId {
  key: ID
  connection: UsersLessonsConnection
}

type UsersLessonsConnectionLesson_id {
  key: Int
  connection: UsersLessonsConnection
}

type UsersLessonsConnectionPublished_at {
  key: DateTime
  connection: UsersLessonsConnection
}

input UsersLessonInput {
  userId: ID
  lesson_id: Int!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editUsersLessonInput {
  userId: ID
  lesson_id: Int
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createUsersLessonInput {
  data: UsersLessonInput
}

type createUsersLessonPayload {
  usersLesson: UsersLessons
}

input updateUsersLessonInput {
  where: InputID
  data: editUsersLessonInput
}

type updateUsersLessonPayload {
  usersLesson: UsersLessons
}

input deleteUsersLessonInput {
  where: InputID
}

type deleteUsersLessonPayload {
  usersLesson: UsersLessons
}

type Wishlist {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  user: UsersPermissionsUser
  courses(sort: String, limit: Int, start: Int, where: JSON): [Course!]!
}

type WishlistConnection {
  values: [Wishlist]
  groupBy: WishlistGroupBy
  aggregate: WishlistAggregator
}

type WishlistAggregator {
  count: Int
  totalCount: Int
}

type WishlistGroupBy {
  id: [WishlistConnectionId]
  created_at: [WishlistConnectionCreated_at]
  updated_at: [WishlistConnectionUpdated_at]
  user: [WishlistConnectionUser]
}

type WishlistConnectionId {
  key: ID
  connection: WishlistConnection
}

type WishlistConnectionCreated_at {
  key: DateTime
  connection: WishlistConnection
}

type WishlistConnectionUpdated_at {
  key: DateTime
  connection: WishlistConnection
}

type WishlistConnectionUser {
  key: ID
  connection: WishlistConnection
}

input WishlistInput {
  user: ID
  courses: [ID]
  created_by: ID
  updated_by: ID
}

input editWishlistInput {
  user: ID
  courses: [ID]
  created_by: ID
  updated_by: ID
}

input createWishlistInput {
  data: WishlistInput
}

type createWishlistPayload {
  wishlist: Wishlist
}

input updateWishlistInput {
  where: InputID
  data: editWishlistInput
}

type updateWishlistPayload {
  wishlist: Wishlist
}

input deleteWishlistInput {
  where: InputID
}

type deleteWishlistPayload {
  wishlist: Wishlist
}

type EmailDesignerEmailTemplate {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
}

input EmailTemplateInput {
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
  created_by: ID
  updated_by: ID
}

input editEmailTemplateInput {
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph!]!
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission!]!
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser!]!
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  completedTasks(sort: String, limit: Int, start: Int, where: JSON): [UsersLessons!]!
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  completedTasks: [ID]
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  completedTasks: [ID]
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type ComponentCourseCurriculum {
  id: ID!
  module: String!
  content: [ComponentCourseVideos]
}

input ComponentCourseCurriculumInput {
  module: String!
  content: [ComponentCourseVideoInput]
}

input editComponentCourseCurriculumInput {
  id: ID
  module: String
  content: [editComponentCourseVideoInput]
}

type ComponentCourseVideos {
  id: ID!
  name: String!
  description: String
  file: UploadFile
  link: String
  classtime: String
  video(sort: String, limit: Int, start: Int, where: JSON): [UploadFile!]!
}

input ComponentCourseVideoInput {
  name: String!
  video: [ID]
  description: String
  file: ID
  link: String
  classtime: String
}

input editComponentCourseVideoInput {
  id: ID
  name: String
  video: [ID]
  description: String
  file: ID
  link: String
  classtime: String
}

type ComponentPageButton {
  id: ID!
  label: String!
  link: String!
}

input ComponentPageButtonInput {
  label: String
  link: String!
}

input editComponentPageButtonInput {
  id: ID
  label: String
  link: String
}

enum ENUM_COMPONENTPAGEHIGHLIGHT_ALIGNMENT {
  right
  left
}

type ComponentPageHighlight {
  id: ID!
  title: String!
  subtitle: String!
  background: UploadFile
  floatImage: UploadFile
  buttonLabel: String!
  buttonLink: String!
  alignment: ENUM_COMPONENTPAGEHIGHLIGHT_ALIGNMENT
}

input ComponentPageHighlightInput {
  title: String!
  subtitle: String!
  background: ID
  floatImage: ID
  buttonLabel: String!
  buttonLink: String!
  alignment: ENUM_COMPONENTPAGEHIGHLIGHT_ALIGNMENT
}

input editComponentPageHighlightInput {
  id: ID
  title: String
  subtitle: String
  background: ID
  floatImage: ID
  buttonLabel: String
  buttonLink: String
  alignment: ENUM_COMPONENTPAGEHIGHLIGHT_ALIGNMENT
}

type ComponentPagePopularGames {
  id: ID!
  title: String!
  highlight: ComponentPageHighlight
  courses(sort: String, limit: Int, start: Int, where: JSON): [Course!]!
}

input ComponentPagePopularGameInput {
  title: String!
  highlight: ComponentPageHighlightInput
  courses: [ID]
}

input editComponentPagePopularGameInput {
  id: ID
  title: String
  highlight: editComponentPageHighlightInput
  courses: [ID]
}

enum ENUM_COMPONENTPAGERIBBON_COLOR {
  primary
  secondary
}

enum ENUM_COMPONENTPAGERIBBON_SIZE {
  small
  normal
}

type ComponentPageRibbon {
  id: ID!
  text: String
  color: ENUM_COMPONENTPAGERIBBON_COLOR
  size: ENUM_COMPONENTPAGERIBBON_SIZE
}

input ComponentPageRibbonInput {
  text: String
  color: ENUM_COMPONENTPAGERIBBON_COLOR
  size: ENUM_COMPONENTPAGERIBBON_SIZE
}

input editComponentPageRibbonInput {
  id: ID
  text: String
  color: ENUM_COMPONENTPAGERIBBON_COLOR
  size: ENUM_COMPONENTPAGERIBBON_SIZE
}

type ComponentPageSection {
  id: ID!
  title: String
  highlight: ComponentPageHighlight
}

input ComponentPageSectionInput {
  title: String
  highlight: ComponentPageHighlightInput
}

input editComponentPageSectionInput {
  id: ID
  title: String
  highlight: editComponentPageHighlightInput
}

type ComponentStaticpageStaticPage {
  id: ID!
  title: String!
  content: String!
}

input ComponentStaticpageStaticPageInput {
  title: String!
  content: String!
}

input editComponentStaticpageStaticPageInput {
  id: ID
  title: String
  content: String
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Banner | BannerConnection | BannerAggregator | BannerGroupBy | BannerConnectionId | BannerConnectionCreated_at | BannerConnectionUpdated_at | BannerConnectionImage | BannerConnectionTitle | BannerConnectionSubtitle | BannerConnectionButton | BannerConnectionRibbon | BannerConnectionPublished_at | createBannerPayload | updateBannerPayload | deleteBannerPayload | Category | CategoryConnection | CategoryAggregator | CategoryGroupBy | CategoryConnectionId | CategoryConnectionCreated_at | CategoryConnectionUpdated_at | CategoryConnectionName | CategoryConnectionSlug | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | CourseType | CourseTypeConnection | CourseTypeAggregator | CourseTypeGroupBy | CourseTypeConnectionId | CourseTypeConnectionCreated_at | CourseTypeConnectionUpdated_at | CourseTypeConnectionName | CourseTypeConnectionSlug | createCourseTypePayload | updateCourseTypePayload | deleteCourseTypePayload | Course | CourseConnection | CourseAggregator | CourseAggregatorSum | CourseAggregatorAvg | CourseAggregatorMin | CourseAggregatorMax | CourseGroupBy | CourseConnectionId | CourseConnectionCreated_at | CourseConnectionUpdated_at | CourseConnectionName | CourseConnectionSlug | CourseConnectionShort_description | CourseConnectionPrice | CourseConnectionDescription | CourseConnectionDuration | CourseConnectionLesson | CourseConnectionCover | CourseConnectionDate_course | CourseConnectionCategory | CourseConnectionInstructor | CourseConnectionCourse_type | CourseConnectionAvailable | CourseConnectionPublished_at | createCoursePayload | updateCoursePayload | deleteCoursePayload | Home | updateHomePayload | deleteHomePayload | Instructor | InstructorConnection | InstructorAggregator | InstructorGroupBy | InstructorConnectionId | InstructorConnectionCreated_at | InstructorConnectionUpdated_at | InstructorConnectionName | InstructorConnectionSlug | InstructorConnectionEmail | InstructorConnectionPhone | createInstructorPayload | updateInstructorPayload | deleteInstructorPayload | Order | OrderConnection | OrderAggregator | OrderGroupBy | OrderConnectionId | OrderConnectionCreated_at | OrderConnectionUpdated_at | OrderConnectionUser | OrderConnectionPayment_intent_id | OrderConnectionCard_brand | OrderConnectionCard_last4 | OrderConnectionTotal_in_cents | createOrderPayload | updateOrderPayload | deleteOrderPayload | Recommended | updateRecommendedPayload | deleteRecommendedPayload | UsersLessons | UsersLessonsConnection | UsersLessonsAggregator | UsersLessonsAggregatorSum | UsersLessonsAggregatorAvg | UsersLessonsAggregatorMin | UsersLessonsAggregatorMax | UsersLessonsGroupBy | UsersLessonsConnectionId | UsersLessonsConnectionCreated_at | UsersLessonsConnectionUpdated_at | UsersLessonsConnectionUserId | UsersLessonsConnectionLesson_id | UsersLessonsConnectionPublished_at | createUsersLessonPayload | updateUsersLessonPayload | deleteUsersLessonPayload | Wishlist | WishlistConnection | WishlistAggregator | WishlistGroupBy | WishlistConnectionId | WishlistConnectionCreated_at | WishlistConnectionUpdated_at | WishlistConnectionUser | createWishlistPayload | updateWishlistPayload | deleteWishlistPayload | EmailDesignerEmailTemplate | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentCourseCurriculum | ComponentCourseVideos | ComponentPageButton | ComponentPageHighlight | ComponentPagePopularGames | ComponentPageRibbon | ComponentPageSection | ComponentStaticpageStaticPage

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  banner(id: ID!, publicationState: PublicationState): Banner
  banners(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Banner!]!
  bannersConnection(sort: String, limit: Int, start: Int, where: JSON): BannerConnection
  category(id: ID!, publicationState: PublicationState): Category
  categories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Category!]!
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategoryConnection
  courseType(id: ID!, publicationState: PublicationState): CourseType
  courseTypes(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [CourseType!]!
  courseTypesConnection(sort: String, limit: Int, start: Int, where: JSON): CourseTypeConnection
  course(id: ID!, publicationState: PublicationState): Course
  courses(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Course!]!
  coursesConnection(sort: String, limit: Int, start: Int, where: JSON): CourseConnection
  home(publicationState: PublicationState): Home
  instructor(id: ID!, publicationState: PublicationState): Instructor
  instructors(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Instructor!]!
  instructorsConnection(sort: String, limit: Int, start: Int, where: JSON): InstructorConnection
  order(id: ID!, publicationState: PublicationState): Order
  orders(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Order!]!
  ordersConnection(sort: String, limit: Int, start: Int, where: JSON): OrderConnection
  recommended(publicationState: PublicationState): Recommended
  usersLesson(id: ID!, publicationState: PublicationState): UsersLessons
  usersLessons(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersLessons!]!
  usersLessonsConnection(sort: String, limit: Int, start: Int, where: JSON): UsersLessonsConnection
  wishlist(id: ID!, publicationState: PublicationState): Wishlist
  wishlists(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Wishlist!]!
  wishlistsConnection(sort: String, limit: Int, start: Int, where: JSON): WishlistConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile!]!
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  """Retrieve all the existing roles. You can't apply filters on this query."""
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole!]!
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser!]!
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createBanner(input: createBannerInput): createBannerPayload
  updateBanner(input: updateBannerInput): updateBannerPayload
  deleteBanner(input: deleteBannerInput): deleteBannerPayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createCourseType(input: createCourseTypeInput): createCourseTypePayload
  updateCourseType(input: updateCourseTypeInput): updateCourseTypePayload
  deleteCourseType(input: deleteCourseTypeInput): deleteCourseTypePayload
  createCourse(input: createCourseInput): createCoursePayload
  updateCourse(input: updateCourseInput): updateCoursePayload
  deleteCourse(input: deleteCourseInput): deleteCoursePayload
  updateHome(input: updateHomeInput): updateHomePayload
  deleteHome: deleteHomePayload
  createInstructor(input: createInstructorInput): createInstructorPayload
  updateInstructor(input: updateInstructorInput): updateInstructorPayload
  deleteInstructor(input: deleteInstructorInput): deleteInstructorPayload
  createOrder(input: createOrderInput): createOrderPayload
  updateOrder(input: updateOrderInput): updateOrderPayload
  deleteOrder(input: deleteOrderInput): deleteOrderPayload
  updateRecommended(input: updateRecommendedInput): updateRecommendedPayload
  deleteRecommended: deleteRecommendedPayload
  createUsersLesson(input: createUsersLessonInput): createUsersLessonPayload
  updateUsersLesson(input: updateUsersLessonInput): updateUsersLessonPayload
  deleteUsersLesson(input: deleteUsersLessonInput): deleteUsersLessonPayload
  createWishlist(input: createWishlistInput): createWishlistPayload
  updateWishlist(input: updateWishlistInput): updateWishlistPayload
  deleteWishlist(input: deleteWishlistInput): deleteWishlistPayload
  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload
  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload
  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload
  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  """Create a new user"""
  createUser(input: createUserInput): createUserPayload
  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload
  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
